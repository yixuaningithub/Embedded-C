
010Led_toggle_bitfields.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000016c  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000300  08000308  00001308  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000300  08000300  00001308  2**0
                  CONTENTS
  4 .ARM          00000000  08000300  08000300  00001308  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000300  08000308  00001308  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000300  08000300  00001300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000304  08000304  00001304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001308  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  00001308  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00001308  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000481  00000000  00000000  00001332  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000000f4  00000000  00000000  000017b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000048  00000000  00000000  000018a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000002c  00000000  00000000  000018f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00000f6e  00000000  00000000  0000191c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000454  00000000  00000000  0000288a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00003dbb  00000000  00000000  00002cde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00006a99  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000058  00000000  00000000  00006adc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000008b  00000000  00000000  00006b34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080002e8 	.word	0x080002e8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	080002e8 	.word	0x080002e8

080001d4 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b087      	sub	sp, #28
 80001d8:	af00      	add	r7, sp, #0
	RCC_AHB1ENR_t volatile *const pClkCtrlReg   = (RCC_AHB1ENR_t*) 0x4002104C;
 80001da:	4b18      	ldr	r3, [pc, #96]	@ (800023c <main+0x68>)
 80001dc:	60fb      	str	r3, [r7, #12]
	GPIOx_MODE_t  volatile *const pPortBModeReg = (GPIOx_MODE_t*) 0x48000400;
 80001de:	4b18      	ldr	r3, [pc, #96]	@ (8000240 <main+0x6c>)
 80001e0:	60bb      	str	r3, [r7, #8]
	GPIOx_ODR_t   volatile *const pPortBOutReg  = (GPIOx_ODR_t*) 0x48000414;
 80001e2:	4b18      	ldr	r3, [pc, #96]	@ (8000244 <main+0x70>)
 80001e4:	607b      	str	r3, [r7, #4]

	//1. enable the clock for GPOID peripheral in the AHB1ENR (SET the 3rd bit position)
	pClkCtrlReg->gpiob_en = 1;
 80001e6:	68fa      	ldr	r2, [r7, #12]
 80001e8:	6813      	ldr	r3, [r2, #0]
 80001ea:	f043 0302 	orr.w	r3, r3, #2
 80001ee:	6013      	str	r3, [r2, #0]


	//2. configure the mode of the IO pin as output
	pPortBModeReg->pin_14 = 1;
 80001f0:	68ba      	ldr	r2, [r7, #8]
 80001f2:	6813      	ldr	r3, [r2, #0]
 80001f4:	2101      	movs	r1, #1
 80001f6:	f361 731d 	bfi	r3, r1, #28, #2
 80001fa:	6013      	str	r3, [r2, #0]

	while(1)
	{
		//Set 12th bit of the output data register to make I/O pin-12 as HIGH
		pPortBOutReg->pin_14  = 1;
 80001fc:	687a      	ldr	r2, [r7, #4]
 80001fe:	6813      	ldr	r3, [r2, #0]
 8000200:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000204:	6013      	str	r3, [r2, #0]

		//introduce small human observable delay
		//This loop executes for 300K times
		for(uint32_t i=0 ; i < 300000 ; i++ );
 8000206:	2300      	movs	r3, #0
 8000208:	617b      	str	r3, [r7, #20]
 800020a:	e002      	b.n	8000212 <main+0x3e>
 800020c:	697b      	ldr	r3, [r7, #20]
 800020e:	3301      	adds	r3, #1
 8000210:	617b      	str	r3, [r7, #20]
 8000212:	697b      	ldr	r3, [r7, #20]
 8000214:	4a0c      	ldr	r2, [pc, #48]	@ (8000248 <main+0x74>)
 8000216:	4293      	cmp	r3, r2
 8000218:	d9f8      	bls.n	800020c <main+0x38>

		//Reset 12th bit of the output data register to make I/O pin-12 as LOW
		pPortBOutReg->pin_14  = 0;
 800021a:	687a      	ldr	r2, [r7, #4]
 800021c:	6813      	ldr	r3, [r2, #0]
 800021e:	f36f 338e 	bfc	r3, #14, #1
 8000222:	6013      	str	r3, [r2, #0]

		for(uint32_t i=0 ; i < 300000 ; i++ );
 8000224:	2300      	movs	r3, #0
 8000226:	613b      	str	r3, [r7, #16]
 8000228:	e002      	b.n	8000230 <main+0x5c>
 800022a:	693b      	ldr	r3, [r7, #16]
 800022c:	3301      	adds	r3, #1
 800022e:	613b      	str	r3, [r7, #16]
 8000230:	693b      	ldr	r3, [r7, #16]
 8000232:	4a05      	ldr	r2, [pc, #20]	@ (8000248 <main+0x74>)
 8000234:	4293      	cmp	r3, r2
 8000236:	d9f8      	bls.n	800022a <main+0x56>
		pPortBOutReg->pin_14  = 1;
 8000238:	e7e0      	b.n	80001fc <main+0x28>
 800023a:	bf00      	nop
 800023c:	4002104c 	.word	0x4002104c
 8000240:	48000400 	.word	0x48000400
 8000244:	48000414 	.word	0x48000414
 8000248:	000493df 	.word	0x000493df

0800024c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800024c:	480d      	ldr	r0, [pc, #52]	@ (8000284 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800024e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000250:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000254:	480c      	ldr	r0, [pc, #48]	@ (8000288 <LoopForever+0x6>)
  ldr r1, =_edata
 8000256:	490d      	ldr	r1, [pc, #52]	@ (800028c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000258:	4a0d      	ldr	r2, [pc, #52]	@ (8000290 <LoopForever+0xe>)
  movs r3, #0
 800025a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800025c:	e002      	b.n	8000264 <LoopCopyDataInit>

0800025e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800025e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000260:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000262:	3304      	adds	r3, #4

08000264 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000264:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000266:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000268:	d3f9      	bcc.n	800025e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800026a:	4a0a      	ldr	r2, [pc, #40]	@ (8000294 <LoopForever+0x12>)
  ldr r4, =_ebss
 800026c:	4c0a      	ldr	r4, [pc, #40]	@ (8000298 <LoopForever+0x16>)
  movs r3, #0
 800026e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000270:	e001      	b.n	8000276 <LoopFillZerobss>

08000272 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000272:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000274:	3204      	adds	r2, #4

08000276 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000276:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000278:	d3fb      	bcc.n	8000272 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800027a:	f000 f811 	bl	80002a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800027e:	f7ff ffa9 	bl	80001d4 <main>

08000282 <LoopForever>:

LoopForever:
  b LoopForever
 8000282:	e7fe      	b.n	8000282 <LoopForever>
  ldr   r0, =_estack
 8000284:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000288:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800028c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000290:	08000308 	.word	0x08000308
  ldr r2, =_sbss
 8000294:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000298:	2000001c 	.word	0x2000001c

0800029c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800029c:	e7fe      	b.n	800029c <ADC1_2_IRQHandler>
	...

080002a0 <__libc_init_array>:
 80002a0:	b570      	push	{r4, r5, r6, lr}
 80002a2:	4d0d      	ldr	r5, [pc, #52]	@ (80002d8 <__libc_init_array+0x38>)
 80002a4:	4c0d      	ldr	r4, [pc, #52]	@ (80002dc <__libc_init_array+0x3c>)
 80002a6:	1b64      	subs	r4, r4, r5
 80002a8:	10a4      	asrs	r4, r4, #2
 80002aa:	2600      	movs	r6, #0
 80002ac:	42a6      	cmp	r6, r4
 80002ae:	d109      	bne.n	80002c4 <__libc_init_array+0x24>
 80002b0:	4d0b      	ldr	r5, [pc, #44]	@ (80002e0 <__libc_init_array+0x40>)
 80002b2:	4c0c      	ldr	r4, [pc, #48]	@ (80002e4 <__libc_init_array+0x44>)
 80002b4:	f000 f818 	bl	80002e8 <_init>
 80002b8:	1b64      	subs	r4, r4, r5
 80002ba:	10a4      	asrs	r4, r4, #2
 80002bc:	2600      	movs	r6, #0
 80002be:	42a6      	cmp	r6, r4
 80002c0:	d105      	bne.n	80002ce <__libc_init_array+0x2e>
 80002c2:	bd70      	pop	{r4, r5, r6, pc}
 80002c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80002c8:	4798      	blx	r3
 80002ca:	3601      	adds	r6, #1
 80002cc:	e7ee      	b.n	80002ac <__libc_init_array+0xc>
 80002ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80002d2:	4798      	blx	r3
 80002d4:	3601      	adds	r6, #1
 80002d6:	e7f2      	b.n	80002be <__libc_init_array+0x1e>
 80002d8:	08000300 	.word	0x08000300
 80002dc:	08000300 	.word	0x08000300
 80002e0:	08000300 	.word	0x08000300
 80002e4:	08000304 	.word	0x08000304

080002e8 <_init>:
 80002e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002ea:	bf00      	nop
 80002ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002ee:	bc08      	pop	{r3}
 80002f0:	469e      	mov	lr, r3
 80002f2:	4770      	bx	lr

080002f4 <_fini>:
 80002f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002f6:	bf00      	nop
 80002f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002fa:	bc08      	pop	{r3}
 80002fc:	469e      	mov	lr, r3
 80002fe:	4770      	bx	lr
