
004Led_on.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000148  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080002dc  080002e4  000012e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080002dc  080002dc  000012e4  2**0
                  CONTENTS
  4 .ARM          00000000  080002dc  080002dc  000012e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080002dc  080002e4  000012e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080002dc  080002dc  000012dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080002e0  080002e0  000012e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000012e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  000012e4  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  000012e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000101  00000000  00000000  0000130e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000098  00000000  00000000  0000140f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000048  00000000  00000000  000014a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000002c  00000000  00000000  000014f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00000f64  00000000  00000000  0000151c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000434  00000000  00000000  00002480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00003c1a  00000000  00000000  000028b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000064ce  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000058  00000000  00000000  00006514  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007d  00000000  00000000  0000656c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080002c4 	.word	0x080002c4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	080002c4 	.word	0x080002c4

080001d4 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b085      	sub	sp, #20
 80001d8:	af00      	add	r7, sp, #0
	uint32_t *pClkCtrlReg = (uint32_t*)0x4002104C;
 80001da:	4b10      	ldr	r3, [pc, #64]	@ (800021c <main+0x48>)
 80001dc:	60fb      	str	r3, [r7, #12]
	uint32_t *pPortDModeReg = (uint32_t*)0x48000400;
 80001de:	4b10      	ldr	r3, [pc, #64]	@ (8000220 <main+0x4c>)
 80001e0:	60bb      	str	r3, [r7, #8]
	uint32_t *pPortDOutReg = (uint32_t*)0x48000414;
 80001e2:	4b10      	ldr	r3, [pc, #64]	@ (8000224 <main+0x50>)
 80001e4:	607b      	str	r3, [r7, #4]
//	temp = temp | 0x08;		// modify, p.251, GPIOD EN = 1
//	*pClkCtrlReg = temp;
	/* same as */
//	*pClkCtrlReg = *pClkCtrlReg | 0x08;
	/* same as */
	*pClkCtrlReg |= (1<<1);
 80001e6:	68fb      	ldr	r3, [r7, #12]
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	f043 0202 	orr.w	r2, r3, #2
 80001ee:	68fb      	ldr	r3, [r7, #12]
 80001f0:	601a      	str	r2, [r3, #0]


	// 2. Configure the mode of the IO pin as output
	// a. clear the 24th and 25th bit positions, p.304
//	*pPortDModeReg &= 0xfcffffff;
	*pPortDModeReg &= ~(3<<28);
 80001f2:	68bb      	ldr	r3, [r7, #8]
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80001fa:	68bb      	ldr	r3, [r7, #8]
 80001fc:	601a      	str	r2, [r3, #0]
	// b. make 24th bit position as 1(set)
//	*pPortDModeReg |= 0x01000000;
	*pPortDModeReg |= (1<<28);
 80001fe:	68bb      	ldr	r3, [r7, #8]
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8000206:	68bb      	ldr	r3, [r7, #8]
 8000208:	601a      	str	r2, [r3, #0]

	// 3. Set 12th bit of the output data register to make I/O pin-12 as High
//	*pPortDOutReg |= 0x1000;
	*pPortDOutReg |= (1<<14);
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	601a      	str	r2, [r3, #0]
    /* Loop forever */
	for(;;);
 8000216:	bf00      	nop
 8000218:	e7fd      	b.n	8000216 <main+0x42>
 800021a:	bf00      	nop
 800021c:	4002104c 	.word	0x4002104c
 8000220:	48000400 	.word	0x48000400
 8000224:	48000414 	.word	0x48000414

08000228 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000228:	480d      	ldr	r0, [pc, #52]	@ (8000260 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800022a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800022c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000230:	480c      	ldr	r0, [pc, #48]	@ (8000264 <LoopForever+0x6>)
  ldr r1, =_edata
 8000232:	490d      	ldr	r1, [pc, #52]	@ (8000268 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000234:	4a0d      	ldr	r2, [pc, #52]	@ (800026c <LoopForever+0xe>)
  movs r3, #0
 8000236:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000238:	e002      	b.n	8000240 <LoopCopyDataInit>

0800023a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800023a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800023c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800023e:	3304      	adds	r3, #4

08000240 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000240:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000242:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000244:	d3f9      	bcc.n	800023a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000246:	4a0a      	ldr	r2, [pc, #40]	@ (8000270 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000248:	4c0a      	ldr	r4, [pc, #40]	@ (8000274 <LoopForever+0x16>)
  movs r3, #0
 800024a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800024c:	e001      	b.n	8000252 <LoopFillZerobss>

0800024e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800024e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000250:	3204      	adds	r2, #4

08000252 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000252:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000254:	d3fb      	bcc.n	800024e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000256:	f000 f811 	bl	800027c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800025a:	f7ff ffbb 	bl	80001d4 <main>

0800025e <LoopForever>:

LoopForever:
  b LoopForever
 800025e:	e7fe      	b.n	800025e <LoopForever>
  ldr   r0, =_estack
 8000260:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000264:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000268:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800026c:	080002e4 	.word	0x080002e4
  ldr r2, =_sbss
 8000270:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000274:	2000001c 	.word	0x2000001c

08000278 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000278:	e7fe      	b.n	8000278 <ADC1_2_IRQHandler>
	...

0800027c <__libc_init_array>:
 800027c:	b570      	push	{r4, r5, r6, lr}
 800027e:	4d0d      	ldr	r5, [pc, #52]	@ (80002b4 <__libc_init_array+0x38>)
 8000280:	4c0d      	ldr	r4, [pc, #52]	@ (80002b8 <__libc_init_array+0x3c>)
 8000282:	1b64      	subs	r4, r4, r5
 8000284:	10a4      	asrs	r4, r4, #2
 8000286:	2600      	movs	r6, #0
 8000288:	42a6      	cmp	r6, r4
 800028a:	d109      	bne.n	80002a0 <__libc_init_array+0x24>
 800028c:	4d0b      	ldr	r5, [pc, #44]	@ (80002bc <__libc_init_array+0x40>)
 800028e:	4c0c      	ldr	r4, [pc, #48]	@ (80002c0 <__libc_init_array+0x44>)
 8000290:	f000 f818 	bl	80002c4 <_init>
 8000294:	1b64      	subs	r4, r4, r5
 8000296:	10a4      	asrs	r4, r4, #2
 8000298:	2600      	movs	r6, #0
 800029a:	42a6      	cmp	r6, r4
 800029c:	d105      	bne.n	80002aa <__libc_init_array+0x2e>
 800029e:	bd70      	pop	{r4, r5, r6, pc}
 80002a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80002a4:	4798      	blx	r3
 80002a6:	3601      	adds	r6, #1
 80002a8:	e7ee      	b.n	8000288 <__libc_init_array+0xc>
 80002aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80002ae:	4798      	blx	r3
 80002b0:	3601      	adds	r6, #1
 80002b2:	e7f2      	b.n	800029a <__libc_init_array+0x1e>
 80002b4:	080002dc 	.word	0x080002dc
 80002b8:	080002dc 	.word	0x080002dc
 80002bc:	080002dc 	.word	0x080002dc
 80002c0:	080002e0 	.word	0x080002e0

080002c4 <_init>:
 80002c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002c6:	bf00      	nop
 80002c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002ca:	bc08      	pop	{r3}
 80002cc:	469e      	mov	lr, r3
 80002ce:	4770      	bx	lr

080002d0 <_fini>:
 80002d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002d2:	bf00      	nop
 80002d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002d6:	bc08      	pop	{r3}
 80002d8:	469e      	mov	lr, r3
 80002da:	4770      	bx	lr
